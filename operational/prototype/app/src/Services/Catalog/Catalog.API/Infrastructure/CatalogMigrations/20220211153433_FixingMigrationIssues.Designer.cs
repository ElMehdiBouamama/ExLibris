// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Microsoft.eShopOnContainers.Services.Catalog.API.Infrastructure;

#nullable disable

namespace Catalog.API.Infrastructure.CatalogMigrations
{
    [DbContext(typeof(CatalogContext))]
    [Migration("20220211153433_FixingMigrationIssues")]
    partial class FixingMigrationIssues
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.HasSequence("catalog_brand_hilo")
                .IncrementsBy(10);

            modelBuilder.HasSequence("catalog_hilo")
                .IncrementsBy(10);

            modelBuilder.HasSequence("categoryseq")
                .IncrementsBy(10);

            modelBuilder.HasSequence("shapeseq")
                .IncrementsBy(10);

            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Catalog.API.Model.CatalogBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "catalog_brand_hilo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Brands", (string)null);
                });

            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Catalog.API.Model.CatalogColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Catalog.API.Model.CatalogColors", b =>
                {
                    b.Property<int>("CatalogItemId")
                        .HasColumnType("int");

                    b.Property<int>("CatalogColorId")
                        .HasColumnType("int");

                    b.Property<int>("AvailableStock")
                        .HasColumnType("int");

                    b.Property<int>("MaxStockThreshold")
                        .HasColumnType("int");

                    b.Property<bool>("OnReorder")
                        .HasColumnType("bit");

                    b.Property<int>("RestockThreshold")
                        .HasColumnType("int");

                    b.HasKey("CatalogItemId", "CatalogColorId");

                    b.HasIndex("CatalogColorId");

                    b.ToTable("CatalogColors", (string)null);
                });

            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Catalog.API.Model.CatalogItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "catalog_hilo");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NumberOfLines")
                        .HasColumnType("int");

                    b.Property<string>("PictureFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(4)
                        .HasColumnType("decimal(4,2)");

                    b.Property<int>("ShapeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Catalog", (string)null);
                });

            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Catalog.API.Model.CatalogTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Catalog.API.Model.CatalogTags", b =>
                {
                    b.Property<int>("CatalogItemId")
                        .HasColumnType("int");

                    b.Property<int>("CatalogTagId")
                        .HasColumnType("int");

                    b.HasKey("CatalogItemId", "CatalogTagId");

                    b.HasIndex("CatalogTagId");

                    b.ToTable("CatalogTags", (string)null);
                });

            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Catalog.API.Model.CatalogColors", b =>
                {
                    b.HasOne("Microsoft.eShopOnContainers.Services.Catalog.API.Model.CatalogColor", "CatalogColor")
                        .WithMany("Items")
                        .HasForeignKey("CatalogColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.eShopOnContainers.Services.Catalog.API.Model.CatalogItem", "CatalogItem")
                        .WithMany("Colors")
                        .HasForeignKey("CatalogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatalogColor");

                    b.Navigation("CatalogItem");
                });

            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Catalog.API.Model.CatalogItem", b =>
                {
                    b.HasOne("Microsoft.eShopOnContainers.Services.Catalog.API.Model.CatalogBrand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Microsoft.eShopOnContainers.Services.Catalog.API.Model.CatalogCategory", "Category", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseHiLo(b1.Property<int>("Id"), "categoryseq");

                            b1.Property<int>("CatalogItemId")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id");

                            b1.HasIndex("CatalogItemId")
                                .IsUnique();

                            b1.ToTable("Category", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("CatalogItemId");
                        });

                    b.OwnsOne("Microsoft.eShopOnContainers.Services.Catalog.API.Model.CatalogDimension", "Dimension", b1 =>
                        {
                            b1.Property<int>("CatalogItemId")
                                .HasColumnType("int");

                            b1.Property<int>("Height")
                                .HasColumnType("int");

                            b1.Property<int>("Width")
                                .HasColumnType("int");

                            b1.HasKey("CatalogItemId");

                            b1.ToTable("Dimension", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("CatalogItemId");
                        });

                    b.OwnsOne("Microsoft.eShopOnContainers.Services.Catalog.API.Model.CatalogShape", "Shape", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseHiLo(b1.Property<int>("Id"), "shapeseq");

                            b1.Property<int>("CatalogItemId")
                                .HasColumnType("int");

                            b1.Property<string>("Shape")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id");

                            b1.HasIndex("CatalogItemId")
                                .IsUnique();

                            b1.ToTable("Shape", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("CatalogItemId");
                        });

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Dimension");

                    b.Navigation("Shape");
                });

            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Catalog.API.Model.CatalogTags", b =>
                {
                    b.HasOne("Microsoft.eShopOnContainers.Services.Catalog.API.Model.CatalogItem", "CatalogItem")
                        .WithMany("Tags")
                        .HasForeignKey("CatalogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.eShopOnContainers.Services.Catalog.API.Model.CatalogTag", "CatalogTag")
                        .WithMany("Items")
                        .HasForeignKey("CatalogTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatalogItem");

                    b.Navigation("CatalogTag");
                });

            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Catalog.API.Model.CatalogColor", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Catalog.API.Model.CatalogItem", b =>
                {
                    b.Navigation("Colors");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Catalog.API.Model.CatalogTag", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
